input {
	beats {
		port => 5044
	}
}

filter {
	grok {
		match => {
			"message" => [
				'%{IPORHOST:client_ip} - (?:-|%{USER:user}) \[%{GREEDYDATA:event_time}\] "%{WORD:http_method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}" %{NUMBER:http_status_code:int} %{NUMBER:bytes:int}',
				'%{IPORHOST:client_ip} - (?:-|%{USER:user}) \[%{HTTPDATE:event_time}\] "%{WORD:http_method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}" %{NUMBER:http_status_code:int} %{NUMBER:bytes:int} "%{DATA:referrer}" "%{DATA:user_agent}"'
			]
		}
		tag_on_failure => "message_parser_failure"
		add_tag => "message_parser"
	}

	mutate {
		convert => { "event_time" => "string" }
		add_tag => "event_time2string"
	}

	date {
		match => [ "event_time", "dd/MM/YYYY:HH:mm:ss Z", "dd/MMM/YYYY:HH:mm:ss Z" ]
		target => "event_time"
		tag_on_failure => "event_time2date_failure"
		add_tag => "event_time2date"
	}

	geoip {
		source => "client_ip"
		tag_on_failure => "geo_ip_failure"
		add_tag => "geo_ip"
	}

	useragent {
		source => "user_agent"
		target => "user_agent"
		add_tag => "user_agent"
	}

	mutate {
		add_field => {
			"agent_type" => "filebeat"
		}
		add_tag => "agent_type"
	}

	ruby {
		code => "event.set('border_logstash_time', Time.now());"
		add_tag => "border_logstash_time"
	}

	mutate {
		convert => { "border_logstash_time" => "string" }
		add_tag => "border_logstash_time2string"
	}

	date {
		match => [ "border_logstash_time", "ISO8601" ]
		target => "border_logstash_time"
		tag_on_failure => "border_logstash_time2date_failure"
		add_tag => "border_logstash_time2date"
	}
}

output {
	kafka {
		bootstrap_servers => "kafka-bus:9092"
		client_id => "apache-logstash-apache"
		topic_id => "apache"
		codec => json
	}

	if "debug" in [tags] {
		stdout {
			codec  => rubydebug {
				metadata => true
			}
		}
	}
}
